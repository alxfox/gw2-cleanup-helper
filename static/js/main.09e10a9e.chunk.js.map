{"version":3,"sources":["logo.svg","Item.js","Blank.js","APIAccess.js","Inventory.js","Character.js","App.js","reportWebVitals.js","index.js"],"names":["Price","name","value","count","applyCount","val","style","color","Math","floor","Item","props","icon","level","id","rarity","type","vendor_value","subtype","stats","buy","sell","flags","insBuy","insSell","upgrades","multi","className","undefined","find","x","map","upgrade","Fragment","border","constantsData","RARITY_COLORS","src","alt","width","height","Blank","img","sliceIntoChunks","array","chunkSize","res","i","length","chunk","slice","push","ids","a","fetchMany","endpoint","fetchStuff","Set","arr","flat","chunks","datas","console","log","fetch","response","json","data","isEquipment","item","getStatSalvage","set","STAT_SETS","details","infix_upgrade","INSCRIPTIONS","INSIGNIAS","Inventory","inventories","useState","items","setItems","useEffect","charSpecificItemData","idsTP","inventory","concat","fetchItems","then","forEach","ins","includes","isTradeable","fetchPrices","prices","out","price","buys","unit_price","sells","statSet","insPrice","key","Character","char","invs","setInvs","link","useContext","AppContext","bags","bag","React","createContext","App","configData","API_KEY","token","characters","setCharacters","CHARACTER","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09e10a9e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useEffect } from \"react\";\r\nimport constantsData from \"./constants.json\";\r\n/**\r\n * A react component for displaying Prices in a gold, silver, copper format\r\n * @param {*} name the label of this price\r\n * @param {*} value value in copper\r\n * @param {*} count a multiplier, count of items\r\n * @param {*} applyCount whether to apply the count as a multiplier to the price\r\n * @returns the component\r\n */\r\nconst Price = (name, value, count, applyCount) => {\r\n  const val = applyCount ? value * count : value;\r\n  return (\r\n    <div>\r\n      {\" \"}\r\n      {name}: <span style={{ color: \"yellow\" }}>{Math.floor(val / 10000)}</span>{\" \"}\r\n      <span style={{ color: \"silver\" }}>{Math.floor((val % 10000) / 100)}</span>{\" \"}\r\n      <span style={{ color: \"orange\" }}>{val % 100}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Item = (props) => {\r\n  const {\r\n    icon,\r\n    id,\r\n    level,\r\n    name,\r\n    rarity,\r\n    type,\r\n    vendor_value,\r\n    subtype,\r\n    stats,\r\n    count,\r\n    buy,\r\n    sell,\r\n    flags,\r\n    insBuy, //insignia/inscription buy and sell price\r\n    insSell,\r\n    upgrades,\r\n  } = props;\r\n  const multi = false; //TODO: make this a state (true while shift held down)\r\n  return (\r\n    <div className=\"tooltip\">\r\n      <span className=\"tooltiptext\">\r\n        <h4>\r\n          {count > 1 ? count : null} {name}\r\n        </h4>\r\n        <div>Level: {level}</div>\r\n        <div>\r\n          {vendor_value > 0 && flags.find((x) => x !== \"NoSell\") === undefined\r\n            ? Price(\"Vendor\", vendor_value)\r\n            : null}\r\n          {buy > 0 ? Price(\"TP Buy\", buy, count, multi) : null}\r\n          {sell > 0 ? Price(\"TP Sell\", sell, count, multi) : null}\r\n          {insBuy > 0 ? Price(\"Ins Buy\", insBuy, count, multi) : null}\r\n          {insSell > 0 ? Price(\"Ins Sell\", insSell, count, multi) : null}\r\n          {upgrades !== undefined\r\n            ? upgrades.map((upgrade, id) => (\r\n                <React.Fragment key={id}>\r\n                  {upgrade.buy > 0\r\n                    ? Price(\"Upgr Buy\", upgrade.buy, count, multi)\r\n                    : null}\r\n                  {upgrade.sell > 0\r\n                    ? Price(\"Upgr Sell\", upgrade.sell, count, multi)\r\n                    : null}\r\n                </React.Fragment>\r\n              ))\r\n            : null}\r\n        </div>\r\n        <div>{type}</div>\r\n      </span>\r\n      <img\r\n        style={{ border: \"2px solid \" + constantsData.RARITY_COLORS[rarity] }}\r\n        className=\"myimg\"\r\n        src={icon}\r\n        alt=\"\"\r\n        width=\"68\"\r\n        height=\"68\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Item;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nconst Blank = ({ img }) => {\r\n  return (\r\n    <div className=\"tooltip\">\r\n      <img\r\n        style={{ border: \"2px solid #000000\" }}\r\n        src={img}\r\n        alt=\"\"\r\n        width=\"68\"\r\n        height=\"68\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Blank;\r\n","/**\r\n *\r\n * @param {*} array to be sliced\r\n * @param {*} chunkSize size of the slices\r\n * @returns array of arrays each with size=chunkSize (last chunk will be arr.size % chunkSize)\r\n */\r\nfunction sliceIntoChunks(array, chunkSize) {\r\n  const res = [];\r\n  for (let i = 0; i < array.length; i += chunkSize) {\r\n    const chunk = array.slice(i, i + chunkSize);\r\n    res.push(chunk);\r\n  }\r\n  return res;\r\n}\r\n\r\n/**\r\n * retrieve price data for requested item ids from the api\r\n * @param {number[]} ids the items requested\r\n * @returns Promise of array with requested prices' data\r\n */\r\nasync function fetchPrices(ids) {\r\n  return fetchMany(ids, \"commerce/prices\");\r\n}\r\n\r\n/**\r\n * retrieve item data for requested item ids from the api\r\n * @param {number[]} ids the items requested\r\n * @returns Promise of array with requested items' data\r\n */\r\nasync function fetchItems(ids) {\r\n  return fetchMany(ids, \"items\");\r\n}\r\n\r\n/**\r\n * wrapper for fetchStuff: removes duplicates and merges return into a single array\r\n * @param {number[]} ids the objects requested\r\n * @param {string} endpoint api endpoint to request from: (e.g. items, commerce/prices)\r\n * @returns Promise of array with requested objects' data\r\n */\r\nasync function fetchMany(ids, endpoint) {\r\n  // const set = new Set(ids);\r\n  // const cleaned = [...set];\r\n  var arr = await fetchStuff([...new Set(ids)], endpoint);\r\n  arr = arr.flat();\r\n  return arr;\r\n}\r\n\r\n/**\r\n * Retrieves data from specified api endpoint (result separated in groups of <200 due to api limitations)\r\n * @param {number[]} ids\r\n * @param {string} endpoint type of request (e.g. items, tp)\r\n * @returns array of promised arrays with requested objects' data\r\n */\r\nasync function fetchStuff(ids, endpoint) {\r\n  const chunks = sliceIntoChunks(ids, 200); //api accepts max number of 200 ids at a time\r\n  var datas = [];\r\n  for (var i = 0; i < chunks.length; i++) {\r\n    console.log(\"i did a fetch from: \" + endpoint);\r\n    const response = await fetch(\r\n      \"https://api.guildwars2.com/v2/\" + endpoint + \"?ids=\" + chunks[i]\r\n    );\r\n    const data = await response.json();\r\n    datas.push(data);\r\n  }\r\n  console.log(\"objects:\", datas);\r\n  return datas;\r\n}\r\n\r\nexport { fetchItems, fetchPrices };\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport Item from \"./Item\";\r\nimport Blank from \"./Blank\";\r\nimport { fetchItems, fetchPrices } from \"./APIAccess\";\r\nimport \"./Inventory.css\";\r\nimport constantsData from \"./constants.json\";\r\nfunction isTradeable(item) {\r\n  if (\r\n    item.flags.includes(\"AccountBound\") ||\r\n    item.flags.includes(\"SoulbindOnAcquire\")\r\n  )\r\n    return false;\r\n  return true;\r\n}\r\nfunction isEquipment(item) {\r\n  return (\r\n    item.type === \"Weapon\" || item.type === \"Back\" || item.type === \"Armor\"\r\n  );\r\n}\r\nfunction getStatSalvage(item) {\r\n  if (isEquipment(item) && item.rarity === \"Exotic\") {\r\n    const set = constantsData.STAT_SETS[item.details.infix_upgrade.id];\r\n    if (set === undefined) return undefined;\r\n    if (item.type === \"Weapon\") return constantsData.INSCRIPTIONS[set];\r\n    else if (item.type === \"Armor\") return constantsData.INSIGNIAS[set];\r\n  }\r\n  return undefined;\r\n}\r\nfunction getUpgrades(item) {\r\n  if (isEquipment(item)) {\r\n    const set = constantsData.STAT_SETS[item.details.infix_upgrade.id];\r\n    if (set === undefined) return undefined;\r\n    if (item.type === \"Weapon\") return constantsData.INSCRIPTIONS[set];\r\n    else if (item.type === \"Armor\") return constantsData.INSIGNIAS[set];\r\n  }\r\n  return undefined;\r\n}\r\n\r\nconst Inventory = ({ inventories }) => {\r\n  const [items, setItems] = useState([]);\r\n  useEffect(() => {\r\n    //save personal itemdata to re-add later (like count)\r\n    var charSpecificItemData = [];\r\n    var idsTP = [];\r\n    const ids = inventories\r\n      .map((inventory) => {\r\n        return inventory.map((item) => {\r\n          if (item) {\r\n            charSpecificItemData.push({\r\n              id: item.id,\r\n              count: item.count,\r\n              upgrades: item.upgrades,\r\n            });\r\n            if (item.upgrades !== undefined) {\r\n              idsTP = idsTP.concat(item.upgrades);\r\n            }\r\n            return item.id;\r\n          } else {\r\n            charSpecificItemData.push({\r\n              id: \"\",\r\n              count: 0,\r\n              upgrades: undefined,\r\n            });\r\n            return \"\";\r\n          }\r\n        });\r\n      })\r\n      .flat();\r\n    console.log(\"allIDs: \" + ids);\r\n\r\n    const myRet = fetchItems(ids);\r\n    myRet.then((items) => {\r\n      items.forEach((item) => {\r\n        const ins = getStatSalvage(item);\r\n        if (ins !== undefined) idsTP.push(ins);\r\n        if (isTradeable(item)) idsTP.push(item.id);\r\n      });\r\n      const pri = fetchPrices(idsTP);\r\n      pri.then((prices) => {\r\n        console.log(\"prices\", prices);\r\n        const out = charSpecificItemData.map(({ id, count, upgrades }) => {\r\n          if (id === \"\") return undefined;\r\n          const item = items.find((item) => item.id === id);\r\n          const price = prices.find((price) => price.id === id);\r\n          if (price === undefined) {\r\n            item.buy = 0;\r\n            item.sell = 0;\r\n          } else {\r\n            item.buy = price.buys.unit_price;\r\n            item.sell = price.sells.unit_price;\r\n          }\r\n          item.upgrades = [];\r\n          if (upgrades !== undefined) {\r\n            item.upgrades = upgrades.map((upgrade) => {\r\n              const price = prices.find((price) => price.id === upgrade);\r\n              return {\r\n                id: upgrade,\r\n                buy: price.buys.unit_price,\r\n                sell: price.sells.unit_price,\r\n              };\r\n            });\r\n          }\r\n          item.count = count;\r\n          const statSet = getStatSalvage(item);\r\n          if (statSet !== undefined) {\r\n            //console.log(\"item has ins price? \", item);\r\n            const insPrice = prices.find((price) => price.id === statSet);\r\n            if (insPrice === undefined) {\r\n              item.insBuy = 0;\r\n              item.insSell = 0;\r\n            } else {\r\n              //console.log(\"item has ins price: \", item);\r\n              item.insBuy = insPrice.buys.unit_price;\r\n              item.insSell = insPrice.sells.unit_price;\r\n            }\r\n          }\r\n\r\n          return item;\r\n        });\r\n        console.log(out);\r\n        setItems(out);\r\n      });\r\n    });\r\n  }, [inventories]);\r\n  return (\r\n    <div className=\"inventory\">\r\n      {items.map((item, id) => {\r\n        // console.log(item);\r\n        if (id === 201) console.log(item);\r\n        if (item === undefined)\r\n          return (\r\n            <Blank\r\n              img=\"https://render.guildwars2.com/file/CC3A2CAADBB2F2B13B1E70079E7E207B08D16E93/65946.png\"\r\n              key={id}\r\n            ></Blank>\r\n          );\r\n        else return <Item {...item} key={id}></Item>;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Inventory;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport Inventory from \"./Inventory\";\r\nimport { AppContext } from \"./App\";\r\nconst Character = ({ char }) => {\r\n  const [invs, setInvs] = useState([]);\r\n  const context = useContext(AppContext);\r\n  const link =\r\n    \"https://api.guildwars2.com/v2/characters/\" +\r\n    char +\r\n    \"/inventory?access_token=\" +\r\n    context;\r\n  useEffect(() => {\r\n    console.log(link);\r\n    fetch(link)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        const bags = data.bags;\r\n        const invs = bags.map((bag) => (bag === null ? null : bag.inventory));\r\n        console.log(invs);\r\n        setInvs(invs);\r\n      });\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <h1>{char}</h1>\r\n      <Inventory inventories={invs}></Inventory>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Character;\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport Bank from \"./Bank\";\nimport Character from \"./Character\";\nimport { getStuff } from \"./APIAccess\";\nimport configData from \"./config.json\";\nexport const AppContext = React.createContext(\"test\");\nfunction App() {\n  const [token, setToken] = useState(\"\" + configData.API_KEY);\n  const [characters, setCharacters] = useState([]);\n\n  useEffect(() => {\n    // var x = await getStuff();\n    // console.log(\"a \" + x);\n    // setCharacters(x);\n    // console.log(\"b\");\n    fetch(\"https://api.guildwars2.com/v2/characters?access_token=\" + token)\n      .then((response) => response.json())\n      .then((data) => {\n        var x = data.map((name, id) => {\n          return { name, id };\n        });\n        // setCharacters(x);\n        setCharacters([{ name: configData.CHARACTER, id: 0 }]);\n      });\n  }, [token]);\n\n  return (\n    <AppContext.Provider value={token}>\n      {/* <Bank></Bank> */}\n      {characters.map((char) => {\n        console.log(char[1]);\n        return <Character key={char.id} char={char.name}></Character>;\n      })}\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}